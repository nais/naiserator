config:
  description: idporten config with sidecar should result in wonderwall sidecar injected to pod

resourceoptions:
  Linkerd: true
  GoogleProjectID: google-project-id
  NumReplicas: 1
  ClusterName: mycluster
  DigdiratorEnabled: true
  NetworkPolicy: true
  Wonderwall:
    Image: nais/wonderwall
  WonderwallEnabled: true

input:
  kind: Application
  apiVersion: v1alpha1
  metadata:
    name: myapplication
    namespace: mynamespace
    labels:
      team: myteam
  spec:
    image: foo/bar
    idporten:
      enabled: true
      redirectPath: "/some/path"
      frontchannelLogoutPath: "/some/other/path"
      postLogoutRedirectURIs:
        - "https://my-client.nav.no/logged_out"
        - "https://nav.no/"
        - "https://some-other-client.nav.no/"
      sidecar:
        enabled: true
        level: Level3
        locale: se
    ingresses:
      - "https://my-client.nav.no/"
    port: 1234

tests:
  - operation: CreateOrUpdate
    apiVersion: apps/v1
    kind: Deployment
    name: myapplication
    match:
      - name: "deployment contains idporten secrets"
        type: regex
        resource:
          spec:
            template:
              spec:
                volumes:
                  - name: ^idporten-myapplication-a0b907e7-.{10}$
                    secret:
                      secretName: ^idporten-myapplication-a0b907e7-.{10}$
                containers:
                  - envFrom:
                      - secretRef:
                          name: ^idporten-myapplication-a0b907e7-.{10}$
                    volumeMounts:
                      - name: ^idporten-myapplication-a0b907e7-.{10}$
                        readOnly: true
                        mountPath: /var/run/secrets/nais.io/idporten

  - operation: CreateOrUpdate
    apiVersion: apps/v1
    kind: Deployment
    name: myapplication
    match:
      - name: "deployment contains sidecar with idporten secrets and desired configuration"
        type: regex
        resource:
          spec:
            template:
              spec:
                volumes:
                  - name: ^idporten-myapplication-a0b907e7-.{10}$
                    secret:
                      secretName: ^idporten-myapplication-a0b907e7-.{10}$
                containers:
                  - name: wonderwall
                    image: nais/wonderwall
                    env:
                      - name: WONDERWALL_UPSTREAM_HOST
                        value: ^127.0.0.1:1234$
                      - name: WONDERWALL_REDIS
                        value: ^nais-io-wonderwall-redis:6379$
                      - name: WONDERWALL_INGRESSES
                        value: ^https://my-client.nav.no/$
                      - name: WONDERWALL_IDPORTEN_SECURITY_LEVEL_ENABLED
                        value: ^true$
                      - name: WONDERWALL_IDPORTEN_LOCALE_ENABLED
                        value: ^true$
                      - name: WONDERWALL_IDPORTEN_SECURITY_LEVEL_VALUE
                        value: ^Level3$
                      - name: WONDERWALL_IDPORTEN_LOCALE_VALUE
                        value: ^se$
                      - name: WONDERWALL_IDPORTEN_POST_LOGOUT_REDIRECT_URI
                        value: ^https://my-client.nav.no/logged_out$
                    envFrom:
                      - secretRef:
                          name: ^idporten-myapplication-a0b907e7-.{10}$
                      - secretRef:
                          name: ^idporten-wonderwall-myapplication-.{8}$

  - apiVersion: v1
    kind: Service
    name: myapplication
    operation: CreateOrUpdate
    match:
      - type: exact
        name: "service created with port 8090"
        exclude:
          - .metadata
          - .status
        resource:
          spec:
            ports:
              - port: 80
                targetPort: 8090
                name: http
                protocol: TCP
            selector:
              app: myapplication
            type: ClusterIP

  - apiVersion: nais.io/v1
    kind: IDPortenClient
    name: myapplication
    operation: CreateOrUpdate
    match:
      - type: subset
        name: "redirect and front-channel logout URIs should match expected paths for sidecar"
        resource:
          spec:
            frontchannelLogoutURI: https://my-client.nav.no/oauth2/logout/frontchannel
            redirectURI: https://my-client.nav.no/oauth2/callback

  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    name: myapplication
    operation: CreateOrUpdate
    match:
      - type: subset
        name: "network policy that allows app to egress to redis"
        resource:
          spec:
            egress:
              - to:
                  - podSelector:
                      matchLabels:
                        app: nais-io-wonderwall-redis

  - operation: CreateIfNotExists
    apiVersion: nais.io/v1alpha1
    kind: Application
    name: nais-io-wonderwall-redis
    match:
      - name: "extra deployment with redis"
        type: exact
        exclude:
          - .metadata.creationTimestamp
          - .status
        resource:
          metadata:
            labels:
              team: myteam
            name: nais-io-wonderwall-redis
            namespace: mynamespace
            annotations:
              nais.io/read-only-file-system: "false"
              nais.io/run-as-user: "999"
          spec:
            image: redis:6
            replicas:
              max: 1
              min: 1
            port: 6379
            service:
              port: 6379
              protocol: redis
            accessPolicy:
              inbound:
                rules:
                  - application: "*"
                    namespace: mynamespace
