testconfig:
  description: minimal idporten config with sidecar should result in wonderwall sidecar injected to pod

config:
  cluster-name: mycluster
  features:
    idporten: true
    wonderwall: true
  gateway-mappings:
    - domainSuffix: .nav.no
      ingressClass: very-nginx
  wonderwall:
    image: nais/wonderwall

input:
  kind: Application
  apiVersion: nais.io/v1alpha1
  metadata:
    name: myapplication
    namespace: mynamespace
    labels:
      team: myteam
  spec:
    image: foo/bar
    idporten:
      sidecar:
        enabled: true
    ingresses:
      - "https://my-client.nav.no/"

tests:
  - operation: CreateOrUpdate
    apiVersion: apps/v1
    kind: Deployment
    name: myapplication
    match:
      - name: "deployment contains sidecar with idporten secrets and desired configuration"
        type: regex
        resource:
          spec:
            template:
              metadata:
                labels:
                  aiven: enabled
                  idporten: enabled
                  team: myteam
                  wonderwall: enabled
              spec:
                volumes:
                  - name: ^idporten-sso$
                    secret:
                      secretName: ^idporten-sso$
                containers:
                  - envFrom:
                      - secretRef:
                          name: ^idporten-sso$
                    name: myapplication
                    volumeMounts:
                      - mountPath: /var/run/secrets/nais.io/idporten
                        name: ^idporten-sso$
                        readOnly: true
                  - env:
                      - name: WONDERWALL_OPENID_PROVIDER
                        value: ^idporten$
                      - name: WONDERWALL_INGRESS
                        value: ^https://my-client.nav.no/$
                      - name: WONDERWALL_UPSTREAM_IP
                        valueFrom:
                          fieldRef:
                            fieldPath: status.podIP
                      - name: WONDERWALL_UPSTREAM_PORT
                        value: "8080"
                      - name: WONDERWALL_BIND_ADDRESS
                        value: ^0.0.0.0:7564$
                      - name: WONDERWALL_METRICS_BIND_ADDRESS
                        value: ^0.0.0.0:7565$
                      - name: WONDERWALL_SHUTDOWN_GRACEFUL_PERIOD
                        value: 30s
                      - name: WONDERWALL_SHUTDOWN_WAIT_BEFORE_PERIOD
                        value: 7s
                    envFrom:
                      - secretRef:
                          name: ^idporten-sso$
                      - secretRef:
                          name: ^wonderwall-idporten-config$
                    image: nais/wonderwall
                    name: wonderwall
                    ports:
                      - containerPort: 7564
                        name: wonderwall
                        protocol: TCP
                      - containerPort: 7565
                        name: ww-metrics
                        protocol: TCP
                    resources:
                      limits:
                        cpu: "2"
                        memory: 256Mi
                      requests:
                        cpu: 20m
                        memory: 32Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                      privileged: false
                      readOnlyRootFilesystem: true
                      runAsGroup: 1069
                      runAsNonRoot: true
                      runAsUser: 1069

  - apiVersion: v1
    kind: Service
    name: myapplication
    operation: CreateOrUpdate
    match:
      - type: exact
        name: "service created with wonderwall port"
        exclude:
          - .metadata
          - .status
        resource:
          spec:
            ports:
              - port: 80
                targetPort: wonderwall
                name: http
                protocol: TCP
            selector:
              app: myapplication
            type: ClusterIP
