testconfig:
  description: when in legacy environment, and we have additionalIngressMappings, we should create ingress for each mapping

config:
  features:
    linkerd: true
    legacy-gcp: true
  gateway-mappings:
    - domainSuffix: .intern.nav.no
      ingressClass: nais-ingress
    - domainSuffix: .nav.no
      ingressClass: nais-ingress-external
  additional-gateway-mappings:
    - domainSuffix: .nav.no
      ingressClass: gw-nav-no
    - domainSuffix: .intern.nav.no
      ingressClass: gw-intern-nav-no

input:
  kind: Application
  apiVersion: nais.io/v1alpha1
  metadata:
    name: myapplication
    namespace: mynamespace
    labels:
      team: myteam
  spec:
    ingresses:
      - https://banan.nav.no
      - https://banan.intern.nav.no

existing:
  - kind: Namespace
    apiVersion: v1
    metadata:
      name: mynamespace
      annotations:
        linkerd.io/inject: enabled

tests:
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    name: myapplication-nais-ingress-941e7d93
    operation: CreateOrUpdate
    match:
      - type: subset
        name: "ingress with nais-ingress ingressClass"
        resource:
          spec:
            ingressClassName: "nais-ingress"
            rules:
              - host: banan.intern.nav.no
                http:
                  paths:
                    - backend:
                        service:
                          name: myapplication
                          port:
                            number: 80
                      path: /
                      pathType: ImplementationSpecific
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    name: myapplication-gw-intern-nav-no-01173569
    operation: CreateOrUpdate
    match:
      - type: subset
        name: "ingress with gw-intern-nav-no ingressClass"
        resource:
          spec:
            ingressClassName: "gw-intern-nav-no"
            rules:
              - host: banan.intern.nav.no
                http:
                  paths:
                    - backend:
                        service:
                          name: myapplication
                          port:
                            number: 80
                      path: /
                      pathType: ImplementationSpecific
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    name: myapplication-gw-nav-no-840772f5
    operation: CreateOrUpdate
    match:
      - type: subset
        name: "ingress with gw-nav-no ingressClass"
        resource:
          spec:
            ingressClassName: "gw-nav-no"
            rules:
              - host: banan.nav.no
                http:
                  paths:
                    - backend:
                        service:
                          name: myapplication
                          port:
                            number: 80
                      path: /
                      pathType: ImplementationSpecific
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    name: myapplication-nais-ingress-external-dd9c46f7
    operation: CreateOrUpdate
    match:
      - type: subset
        name: "ingress with nais-ingress-external ingressClass"
        resource:
          spec:
            ingressClassName: "nais-ingress-external"
            rules:
              - host: banan.nav.no
                http:
                  paths:
                    - backend:
                        service:
                          name: myapplication
                          port:
                            number: 80
                      path: /
                      pathType: ImplementationSpecific