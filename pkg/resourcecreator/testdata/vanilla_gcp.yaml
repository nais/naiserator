config:
  description: vanilla application running in GCP with default configuration and access policies

resourceoptions:
  Linkerd: true
  NetworkPolicy: true
  GoogleProjectID: google-project-id
  NumReplicas: 1

input:
  kind: Application
  apiVersion: v1alpha1
  metadata:
    name: myapplication
    namespace: mynamespace
    uid: "123456"
    labels:
      team: myteam
  spec:
    image: navikt/myapplication:1.2.3

tests:
  - match:
      - type: subset
        name: "common metadata"
        resource:
          metadata:
            labels:
              app: myapplication
              team: myteam
            ownerReferences:
              - apiVersion: v1alpha1
                kind: Application
                name: myapplication
                uid: "123456"

  - apiVersion: v1
    kind: Service
    name: myapplication
    operation: CreateOrUpdate
    match:
      - type: exact
        name: "service created with tcp port 80"
        exclude:
          - .metadata
          - .status
        resource:
          spec:
            ports:
              - port: 80
                targetPort: http
                name: http
                protocol: TCP
            selector:
              app: myapplication
            type: ClusterIP

  - operation: CreateIfNotExists
    apiVersion: v1
    kind: ServiceAccount
    name: myapplication
    match:
      - type: subset
        name: "service account created with google IaM annotation"
        resource:
          metadata:
            annotations:
              iam.gke.io/gcp-service-account: myapplicati-mynamespac-w4o5cwa@google-project-id.iam.gserviceaccount.com

  - operation: CreateOrUpdate
    apiVersion: autoscaling/v2beta2
    kind: HorizontalPodAutoscaler
    match:
      - type: exact
        name: "hpa created with 2-4 replicas and 50% cpu threshold"
        exclude:
          - .metadata
          - .status
        resource:
          spec:
            scaleTargetRef:
              kind: Deployment
              name: myapplication
              apiVersion: apps/v1
            minReplicas: 2
            maxReplicas: 4
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 50

  - operation: CreateOrUpdate
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    name: myapplication
    match:
      - name: "network policy created with only system services"
        type: exact
        exclude:
          - .metadata
        resource:
          spec:
            egress:
              - to:
                  - namespaceSelector:
                      matchLabels:
                        linkerd.io/is-control-plane: "true"
                  - namespaceSelector: { }
                    podSelector:
                      matchLabels:
                        k8s-app: kube-dns
                  - ipBlock:
                      cidr: 0.0.0.0/0
            ingress:
              - from:
                  - namespaceSelector:
                      matchLabels:
                        name: nais
                    podSelector:
                      matchLabels:
                        app: prometheus
              - from:
                  - namespaceSelector:
                      matchLabels:
                        linkerd.io/is-control-plane: "true"
              - from:
                  - namespaceSelector:
                      matchLabels:
                        linkerd.io/extension: viz
                    podSelector:
                      matchLabels:
                        component: tap
              - from:
                  - namespaceSelector:
                      matchLabels:
                        linkerd.io/extension: viz
                    podSelector:
                      matchLabels:
                        component: prometheus
            podSelector:
              matchLabels:
                app: myapplication
            policyTypes:
              - Ingress
              - Egress

  - apiVersion: iam.cnrm.cloud.google.com/v1beta1
    kind: IAMServiceAccount
    operation: CreateIfNotExists
    match:
      - type: subset
        name: "IAMServiceAccount created in namespace serviceaccounts"
        exclude:
          - .metadata.creationTimestamp
        resource:
          metadata:
            annotations:
              cnrm.cloud.google.com/project-id: google-project-id
              nais.io/team: mynamespace
            name: myapplicati-mynamespac-w4o5cwa
            namespace: serviceaccounts
          spec:
            displayName: myapplication

  - apiVersion: iam.cnrm.cloud.google.com/v1beta1
    kind: IAMPolicy
    operation: CreateIfNotExists
    match:
      - type: subset
        name: "IAMPolicy created in namespace serviceaccounts"
        resource:
          metadata:
            annotations:
              cnrm.cloud.google.com/project-id: google-project-id
            name: myapplicati-mynamespac-w4o5cwa
            namespace: serviceaccounts
          spec:
            bindings:
              - members:
                  - serviceAccount:google-project-id.svc.id.goog[mynamespace/myapplication]
                role: roles/iam.workloadIdentityUser
            resourceRef:
              apiVersion: iam.cnrm.cloud.google.com/v1beta1
              kind: IAMServiceAccount
              name: myapplicati-mynamespac-w4o5cwa

  - operation: CreateOrUpdate
    apiVersion: policy/v1beta1
    kind: PodDisruptionBudget
    name: myapplication
    match:
      - type: exact
        name: "pdb created with 1 max unavailable"
        exclude:
          - .metadata
          - .status
        resource:
          spec:
            maxUnavailable: 1
            selector:
              matchLabels:
                app: myapplication
