// generated by your friendly code generator. DO NOT EDIT.
// to refresh this file, run `go generate` in your shell.

package updater

import (
	"fmt"
	"github.com/nais/naiserator/pkg/apis/istio/v1alpha1"

	clientV1Alpha1 "github.com/nais/naiserator/pkg/client/clientset/versioned"
	istio_v1alpha1 "github.com/nais/naiserator/pkg/client/clientset/versioned/typed/istio/v1alpha1"
	log "github.com/sirupsen/logrus"
	appsv1 "k8s.io/api/apps/v1"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	corev1 "k8s.io/api/core/v1"
	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	networkingv1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes"
	typed_apps_v1 "k8s.io/client-go/kubernetes/typed/apps/v1"
	typed_autoscaling_v1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
	typed_core_v1 "k8s.io/client-go/kubernetes/typed/core/v1"
	typed_extensions_v1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	typed_networking_v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
)

func service(client typed_core_v1.ServiceInterface, old, new *corev1.Service) func() error {
	log.Infof("creating or updating *corev1.Service for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	CopyService(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func serviceAccount(client typed_core_v1.ServiceAccountInterface, old, new *corev1.ServiceAccount) func() error {
	log.Infof("creating or updating *corev1.ServiceAccount for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func deployment(client typed_apps_v1.DeploymentInterface, old, new *appsv1.Deployment) func() error {
	log.Infof("creating or updating *appsv1.Deployment for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func ingress(client typed_extensions_v1beta1.IngressInterface, old, new *extensionsv1beta1.Ingress) func() error {
	log.Infof("creating or updating *extensionsv1beta1.Ingress for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func horizontalPodAutoscaler(client typed_autoscaling_v1.HorizontalPodAutoscalerInterface, old, new *autoscalingv1.HorizontalPodAutoscaler) func() error {
	log.Infof("creating or updating *autoscalingv1.HorizontalPodAutoscaler for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func networkPolicy(client typed_networking_v1.NetworkPolicyInterface, old, new *networkingv1.NetworkPolicy) func() error {
	log.Infof("creating or updating *networkingv1.NetworkPolicy for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func serviceRole(client istio_v1alpha1.ServiceRoleInterface, old, new *v1alpha1.ServiceRole) func() error {
	log.Infof("creating or updating *v1alpha1.ServiceRole for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func serviceRoleBinding(client istio_v1alpha1.ServiceRoleBindingInterface, old, new *v1alpha1.ServiceRoleBinding) func() error {
	log.Infof("creating or updating *v1alpha1.ServiceRoleBinding for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func Updater(clientSet kubernetes.Interface, customClient *clientV1Alpha1.Clientset, resource runtime.Object) func() error {
	switch new := resource.(type) {

	case *corev1.Service:
		c := clientSet.CoreV1().Services(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return service(c, nil, new)
		}
		return service(c, old, new)

	case *corev1.ServiceAccount:
		c := clientSet.CoreV1().ServiceAccounts(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return serviceAccount(c, nil, new)
		}
		return serviceAccount(c, old, new)

	case *appsv1.Deployment:
		c := clientSet.AppsV1().Deployments(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return deployment(c, nil, new)
		}
		return deployment(c, old, new)

	case *extensionsv1beta1.Ingress:
		c := clientSet.ExtensionsV1beta1().Ingresses(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return ingress(c, nil, new)
		}
		return ingress(c, old, new)

	case *autoscalingv1.HorizontalPodAutoscaler:
		c := clientSet.AutoscalingV1().HorizontalPodAutoscalers(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return horizontalPodAutoscaler(c, nil, new)
		}
		return horizontalPodAutoscaler(c, old, new)

	case *networkingv1.NetworkPolicy:
		c := clientSet.NetworkingV1().NetworkPolicies(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return networkPolicy(c, nil, new)
		}
		return networkPolicy(c, old, new)

	case *v1alpha1.ServiceRole:
		c := customClient.RbacV1alpha1().ServiceRoles(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return serviceRole(c, nil, new)
		}
		return serviceRole(c, old, new)

	case *v1alpha1.ServiceRoleBinding:
		c := customClient.RbacV1alpha1().ServiceRoleBindings(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return serviceRoleBinding(c, nil, new)
		}
		return serviceRoleBinding(c, old, new)

	default:
		panic(fmt.Errorf("BUG! You didn't specify a case for type '%T' in the file hack/generator/updater.go", new))
	}
}
