// generated by your friendly code generator. DO NOT EDIT.
// to refresh this file, run `go generate` in your shell.

package updater

import (
	"fmt"

	iam_cnrm_cloud_google_com_v1beta1 "github.com/nais/naiserator/pkg/apis/iam.cnrm.cloud.google.com/v1beta1"
	nais_v1 "github.com/nais/naiserator/pkg/apis/nais.io/v1"
	nais_v1alpha1 "github.com/nais/naiserator/pkg/apis/nais.io/v1alpha1"
	networking_istio_io_v1alpha3 "github.com/nais/naiserator/pkg/apis/networking.istio.io/v1alpha3"
	sql_cnrm_cloud_google_com_v1beta1 "github.com/nais/naiserator/pkg/apis/sql.cnrm.cloud.google.com/v1beta1"
	storage_cnrm_cloud_google_com_v1beta1 "github.com/nais/naiserator/pkg/apis/storage.cnrm.cloud.google.com/v1beta1"
	clientV1Alpha1 "github.com/nais/naiserator/pkg/client/clientset/versioned"
	typed_iam_cnrm_cloud_google_com_v1beta1 "github.com/nais/naiserator/pkg/client/clientset/versioned/typed/iam.cnrm.cloud.google.com/v1beta1"
	typed_nais_v1 "github.com/nais/naiserator/pkg/client/clientset/versioned/typed/nais.io/v1"
	typed_networking_istio_io_v1alpha3 "github.com/nais/naiserator/pkg/client/clientset/versioned/typed/networking.istio.io/v1alpha3"
	typed_sql_cnrm_cloud_google_com_v1beta1 "github.com/nais/naiserator/pkg/client/clientset/versioned/typed/sql.cnrm.cloud.google.com/v1beta1"
	typed_storage_cnrm_cloud_google_com_v1beta1 "github.com/nais/naiserator/pkg/client/clientset/versioned/typed/storage.cnrm.cloud.google.com/v1beta1"
	log "github.com/sirupsen/logrus"
	istio_security_v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
	istioClientSet "istio.io/client-go/pkg/clientset/versioned"
	typed_istio_security_v1beta1 "istio.io/client-go/pkg/clientset/versioned/typed/security/v1beta1"
	appsv1 "k8s.io/api/apps/v1"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"
	networkingv1beta1 "k8s.io/api/networking/v1beta1"
	rbacv1 "k8s.io/api/rbac/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes"
	typed_apps_v1 "k8s.io/client-go/kubernetes/typed/apps/v1"
	typed_autoscaling_v1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
	typed_core_v1 "k8s.io/client-go/kubernetes/typed/core/v1"
	typed_networking_v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
	typed_networking_v1beta1 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"
	typed_rbac_v1 "k8s.io/client-go/kubernetes/typed/rbac/v1"
)

func service(client typed_core_v1.ServiceInterface, old, new *corev1.Service) func() error {
	log.Infof("creating or updating *corev1.Service for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	CopyService(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func secret(client typed_core_v1.SecretInterface, old, new *corev1.Secret) func() error {
	log.Infof("creating or updating *corev1.Secret for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func serviceAccount(client typed_core_v1.ServiceAccountInterface, old, new *corev1.ServiceAccount) func() error {
	log.Infof("creating or updating *corev1.ServiceAccount for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func deployment(client typed_apps_v1.DeploymentInterface, old, new *appsv1.Deployment) func() error {
	log.Infof("creating or updating *appsv1.Deployment for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func ingress(client typed_networking_v1beta1.IngressInterface, old, new *networkingv1beta1.Ingress) func() error {
	log.Infof("creating or updating *networkingv1beta1.Ingress for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func horizontalPodAutoscaler(client typed_autoscaling_v1.HorizontalPodAutoscalerInterface, old, new *autoscalingv1.HorizontalPodAutoscaler) func() error {
	log.Infof("creating or updating *autoscalingv1.HorizontalPodAutoscaler for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func networkPolicy(client typed_networking_v1.NetworkPolicyInterface, old, new *networkingv1.NetworkPolicy) func() error {
	log.Infof("creating or updating *networkingv1.NetworkPolicy for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func virtualService(client typed_networking_istio_io_v1alpha3.VirtualServiceInterface, old, new *networking_istio_io_v1alpha3.VirtualService) func() error {
	log.Infof("creating or updating *networking_istio_io_v1alpha3.VirtualService for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func ServiceEntry(client typed_networking_istio_io_v1alpha3.ServiceEntryInterface, old, new *networking_istio_io_v1alpha3.ServiceEntry) func() error {
	log.Infof("creating or updating *networking_istio_io_v1alpha3.ServiceEntry for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func Role(client typed_rbac_v1.RoleInterface, old, new *rbacv1.Role) func() error {
	log.Infof("creating or updating *rbacv1.Role for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func RoleBinding(client typed_rbac_v1.RoleBindingInterface, old, new *rbacv1.RoleBinding) func() error {
	log.Infof("creating or updating *rbacv1.RoleBinding for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func iamServiceAccount(client typed_iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccountInterface, old, new *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount) func() error {
	log.Infof("creating or updating *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func iamPolicy(client typed_iam_cnrm_cloud_google_com_v1beta1.IAMPolicyInterface, old, new *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy) func() error {
	log.Infof("creating or updating *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func iamPolicyMember(client typed_iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMemberInterface, old, new *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember) func() error {
	log.Infof("creating or updating *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func googleStorageBucket(client typed_storage_cnrm_cloud_google_com_v1beta1.StorageBucketInterface, old, new *storage_cnrm_cloud_google_com_v1beta1.StorageBucket) func() error {
	log.Infof("creating or updating *storage_cnrm_cloud_google_com_v1beta1.StorageBucket for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func googleStorageBucketAccessControl(client typed_storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControlInterface, old, new *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl) func() error {
	log.Infof("creating or updating *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func sqlInstance(client typed_sql_cnrm_cloud_google_com_v1beta1.SQLInstanceInterface, old, new *sql_cnrm_cloud_google_com_v1beta1.SQLInstance) func() error {
	log.Infof("creating or updating *sql_cnrm_cloud_google_com_v1beta1.SQLInstance for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func sqlDatabase(client typed_sql_cnrm_cloud_google_com_v1beta1.SQLDatabaseInterface, old, new *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase) func() error {
	log.Infof("creating or updating *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func sqlUser(client typed_sql_cnrm_cloud_google_com_v1beta1.SQLUserInterface, old, new *sql_cnrm_cloud_google_com_v1beta1.SQLUser) func() error {
	log.Infof("creating or updating *sql_cnrm_cloud_google_com_v1beta1.SQLUser for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func authorizationPolicy(client typed_istio_security_v1beta1.AuthorizationPolicyInterface, old, new *istio_security_v1beta1.AuthorizationPolicy) func() error {
	log.Infof("creating or updating *istio_security_v1beta1.AuthorizationPolicy for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func jwker(client typed_nais_v1.JwkerInterface, old, new *nais_v1.Jwker) func() error {
	log.Infof("creating or updating *nais_v1.Jwker for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func azureAdApplication(client typed_nais_v1.AzureAdApplicationInterface, old, new *nais_v1.AzureAdApplication) func() error {
	log.Infof("creating or updating *nais_v1.AzureAdApplication for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func idPortenClient(client typed_nais_v1.IDPortenClientInterface, old, new *nais_v1.IDPortenClient) func() error {
	log.Infof("creating or updating *nais_v1.IDPortenClient for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func maskinportenClient(client typed_nais_v1.MaskinportenClientInterface, old, new *nais_v1.MaskinportenClient) func() error {
	log.Infof("creating or updating *nais_v1.MaskinportenClient for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func CreateOrUpdate(clientSet kubernetes.Interface, customClient clientV1Alpha1.Interface, istioClient istioClientSet.Interface, resource runtime.Object) func() error {
	switch new := resource.(type) {

	case *corev1.Service:
		c := clientSet.CoreV1().Services(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return service(c, nil, new)
		}
		return service(c, old, new)

	case *corev1.Secret:
		c := clientSet.CoreV1().Secrets(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return secret(c, nil, new)
		}
		return secret(c, old, new)

	case *corev1.ServiceAccount:
		c := clientSet.CoreV1().ServiceAccounts(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return serviceAccount(c, nil, new)
		}
		return serviceAccount(c, old, new)

	case *appsv1.Deployment:
		c := clientSet.AppsV1().Deployments(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return deployment(c, nil, new)
		}
		return deployment(c, old, new)

	case *networkingv1beta1.Ingress:
		c := clientSet.NetworkingV1beta1().Ingresses(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return ingress(c, nil, new)
		}
		return ingress(c, old, new)

	case *autoscalingv1.HorizontalPodAutoscaler:
		c := clientSet.AutoscalingV1().HorizontalPodAutoscalers(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return horizontalPodAutoscaler(c, nil, new)
		}
		return horizontalPodAutoscaler(c, old, new)

	case *networkingv1.NetworkPolicy:
		c := clientSet.NetworkingV1().NetworkPolicies(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return networkPolicy(c, nil, new)
		}
		return networkPolicy(c, old, new)

	case *networking_istio_io_v1alpha3.VirtualService:
		c := customClient.NetworkingV1alpha3().VirtualServices(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return virtualService(c, nil, new)
		}
		return virtualService(c, old, new)

	case *networking_istio_io_v1alpha3.ServiceEntry:
		c := customClient.NetworkingV1alpha3().ServiceEntries(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return ServiceEntry(c, nil, new)
		}
		return ServiceEntry(c, old, new)

	case *rbacv1.Role:
		c := clientSet.RbacV1().Roles(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return Role(c, nil, new)
		}
		return Role(c, old, new)

	case *rbacv1.RoleBinding:
		c := clientSet.RbacV1().RoleBindings(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return RoleBinding(c, nil, new)
		}
		return RoleBinding(c, old, new)

	case *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount:
		c := customClient.IamV1beta1().IAMServiceAccounts(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return iamServiceAccount(c, nil, new)
		}
		return iamServiceAccount(c, old, new)

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy:
		c := customClient.IamV1beta1().IAMPolicies(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return iamPolicy(c, nil, new)
		}
		return iamPolicy(c, old, new)

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember:
		c := customClient.IamV1beta1().IAMPolicyMembers(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return iamPolicyMember(c, nil, new)
		}
		return iamPolicyMember(c, old, new)

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucket:
		c := customClient.StorageV1beta1().StorageBuckets(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return googleStorageBucket(c, nil, new)
		}
		return googleStorageBucket(c, old, new)

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl:
		c := customClient.StorageV1beta1().StorageBucketAccessControls(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return googleStorageBucketAccessControl(c, nil, new)
		}
		return googleStorageBucketAccessControl(c, old, new)

	case *sql_cnrm_cloud_google_com_v1beta1.SQLInstance:
		c := customClient.SqlV1beta1().SQLInstances(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return sqlInstance(c, nil, new)
		}
		return sqlInstance(c, old, new)

	case *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase:
		c := customClient.SqlV1beta1().SQLDatabases(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return sqlDatabase(c, nil, new)
		}
		return sqlDatabase(c, old, new)

	case *sql_cnrm_cloud_google_com_v1beta1.SQLUser:
		c := customClient.SqlV1beta1().SQLUsers(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return sqlUser(c, nil, new)
		}
		return sqlUser(c, old, new)

	case *istio_security_v1beta1.AuthorizationPolicy:
		c := istioClient.SecurityV1beta1().AuthorizationPolicies(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return authorizationPolicy(c, nil, new)
		}
		return authorizationPolicy(c, old, new)

	case *nais_v1.Jwker:
		c := customClient.NaisV1().Jwkers(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return jwker(c, nil, new)
		}
		return jwker(c, old, new)

	case *nais_v1.AzureAdApplication:
		c := customClient.NaisV1().AzureAdApplications(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return azureAdApplication(c, nil, new)
		}
		return azureAdApplication(c, old, new)

	case *nais_v1.IDPortenClient:
		c := customClient.NaisV1().IDPortenClients(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return idPortenClient(c, nil, new)
		}
		return idPortenClient(c, old, new)

	case *nais_v1.MaskinportenClient:
		c := customClient.NaisV1().MaskinportenClients(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return maskinportenClient(c, nil, new)
		}
		return maskinportenClient(c, old, new)

	default:
		panic(fmt.Errorf("BUG! You didn't specify a case for type '%T' in the file hack/generator/updater.go", new))
	}
}

func CreateOrRecreate(clientSet kubernetes.Interface, customClient clientV1Alpha1.Interface, istioClient istioClientSet.Interface, resource runtime.Object) func() error {
	switch new := resource.(type) {

	case *corev1.Service:
		c := clientSet.CoreV1().Services(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *corev1.Service for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *corev1.Service for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *corev1.Secret:
		c := clientSet.CoreV1().Secrets(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *corev1.Secret for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *corev1.Secret for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *corev1.ServiceAccount:
		c := clientSet.CoreV1().ServiceAccounts(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *corev1.ServiceAccount for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *corev1.ServiceAccount for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *appsv1.Deployment:
		c := clientSet.AppsV1().Deployments(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *appsv1.Deployment for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *appsv1.Deployment for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *networkingv1beta1.Ingress:
		c := clientSet.NetworkingV1beta1().Ingresses(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *networkingv1beta1.Ingress for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *networkingv1beta1.Ingress for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *autoscalingv1.HorizontalPodAutoscaler:
		c := clientSet.AutoscalingV1().HorizontalPodAutoscalers(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *autoscalingv1.HorizontalPodAutoscaler for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *autoscalingv1.HorizontalPodAutoscaler for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *networkingv1.NetworkPolicy:
		c := clientSet.NetworkingV1().NetworkPolicies(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *networkingv1.NetworkPolicy for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *networkingv1.NetworkPolicy for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *networking_istio_io_v1alpha3.VirtualService:
		c := customClient.NetworkingV1alpha3().VirtualServices(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *networking_istio_io_v1alpha3.VirtualService for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *networking_istio_io_v1alpha3.VirtualService for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *networking_istio_io_v1alpha3.ServiceEntry:
		c := customClient.NetworkingV1alpha3().ServiceEntries(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *networking_istio_io_v1alpha3.ServiceEntry for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *networking_istio_io_v1alpha3.ServiceEntry for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *rbacv1.Role:
		c := clientSet.RbacV1().Roles(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *rbacv1.Role for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *rbacv1.Role for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *rbacv1.RoleBinding:
		c := clientSet.RbacV1().RoleBindings(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *rbacv1.RoleBinding for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *rbacv1.RoleBinding for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount:
		c := customClient.IamV1beta1().IAMServiceAccounts(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy:
		c := customClient.IamV1beta1().IAMPolicies(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember:
		c := customClient.IamV1beta1().IAMPolicyMembers(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucket:
		c := customClient.StorageV1beta1().StorageBuckets(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *storage_cnrm_cloud_google_com_v1beta1.StorageBucket for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *storage_cnrm_cloud_google_com_v1beta1.StorageBucket for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl:
		c := customClient.StorageV1beta1().StorageBucketAccessControls(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLInstance:
		c := customClient.SqlV1beta1().SQLInstances(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *sql_cnrm_cloud_google_com_v1beta1.SQLInstance for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *sql_cnrm_cloud_google_com_v1beta1.SQLInstance for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase:
		c := customClient.SqlV1beta1().SQLDatabases(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLUser:
		c := customClient.SqlV1beta1().SQLUsers(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *sql_cnrm_cloud_google_com_v1beta1.SQLUser for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *sql_cnrm_cloud_google_com_v1beta1.SQLUser for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *istio_security_v1beta1.AuthorizationPolicy:
		c := istioClient.SecurityV1beta1().AuthorizationPolicies(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *istio_security_v1beta1.AuthorizationPolicy for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *istio_security_v1beta1.AuthorizationPolicy for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *nais_v1.Jwker:
		c := customClient.NaisV1().Jwkers(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *nais_v1.Jwker for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *nais_v1.Jwker for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *nais_v1.AzureAdApplication:
		c := customClient.NaisV1().AzureAdApplications(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *nais_v1.AzureAdApplication for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *nais_v1.AzureAdApplication for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *nais_v1.IDPortenClient:
		c := customClient.NaisV1().IDPortenClients(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *nais_v1.IDPortenClient for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *nais_v1.IDPortenClient for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	case *nais_v1.MaskinportenClient:
		c := customClient.NaisV1().MaskinportenClients(new.Namespace)
		return func() error {
			log.Infof("pre-deleting *nais_v1.MaskinportenClient for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && !errors.IsNotFound(err) {
				return err
			}
			log.Infof("creating new *nais_v1.MaskinportenClient for %s", new.Name)
			_, err = c.Create(new)
			return err
		}

	default:
		panic(fmt.Errorf("BUG! You didn't specify a case for type '%T' in the file hack/generator/updater.go", new))
	}
}

func CreateIfNotExists(clientSet kubernetes.Interface, customClient clientV1Alpha1.Interface, istioClient istioClientSet.Interface, resource runtime.Object) func() error {
	switch new := resource.(type) {

	case *corev1.Service:
		c := clientSet.CoreV1().Services(new.Namespace)
		return func() error {
			log.Infof("creating new *corev1.Service for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *corev1.Secret:
		c := clientSet.CoreV1().Secrets(new.Namespace)
		return func() error {
			log.Infof("creating new *corev1.Secret for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *corev1.ServiceAccount:
		c := clientSet.CoreV1().ServiceAccounts(new.Namespace)
		return func() error {
			log.Infof("creating new *corev1.ServiceAccount for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *appsv1.Deployment:
		c := clientSet.AppsV1().Deployments(new.Namespace)
		return func() error {
			log.Infof("creating new *appsv1.Deployment for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *networkingv1beta1.Ingress:
		c := clientSet.NetworkingV1beta1().Ingresses(new.Namespace)
		return func() error {
			log.Infof("creating new *networkingv1beta1.Ingress for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *autoscalingv1.HorizontalPodAutoscaler:
		c := clientSet.AutoscalingV1().HorizontalPodAutoscalers(new.Namespace)
		return func() error {
			log.Infof("creating new *autoscalingv1.HorizontalPodAutoscaler for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *networkingv1.NetworkPolicy:
		c := clientSet.NetworkingV1().NetworkPolicies(new.Namespace)
		return func() error {
			log.Infof("creating new *networkingv1.NetworkPolicy for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *networking_istio_io_v1alpha3.VirtualService:
		c := customClient.NetworkingV1alpha3().VirtualServices(new.Namespace)
		return func() error {
			log.Infof("creating new *networking_istio_io_v1alpha3.VirtualService for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *networking_istio_io_v1alpha3.ServiceEntry:
		c := customClient.NetworkingV1alpha3().ServiceEntries(new.Namespace)
		return func() error {
			log.Infof("creating new *networking_istio_io_v1alpha3.ServiceEntry for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *rbacv1.Role:
		c := clientSet.RbacV1().Roles(new.Namespace)
		return func() error {
			log.Infof("creating new *rbacv1.Role for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *rbacv1.RoleBinding:
		c := clientSet.RbacV1().RoleBindings(new.Namespace)
		return func() error {
			log.Infof("creating new *rbacv1.RoleBinding for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount:
		c := customClient.IamV1beta1().IAMServiceAccounts(new.Namespace)
		return func() error {
			log.Infof("creating new *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy:
		c := customClient.IamV1beta1().IAMPolicies(new.Namespace)
		return func() error {
			log.Infof("creating new *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember:
		c := customClient.IamV1beta1().IAMPolicyMembers(new.Namespace)
		return func() error {
			log.Infof("creating new *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucket:
		c := customClient.StorageV1beta1().StorageBuckets(new.Namespace)
		return func() error {
			log.Infof("creating new *storage_cnrm_cloud_google_com_v1beta1.StorageBucket for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl:
		c := customClient.StorageV1beta1().StorageBucketAccessControls(new.Namespace)
		return func() error {
			log.Infof("creating new *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLInstance:
		c := customClient.SqlV1beta1().SQLInstances(new.Namespace)
		return func() error {
			log.Infof("creating new *sql_cnrm_cloud_google_com_v1beta1.SQLInstance for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase:
		c := customClient.SqlV1beta1().SQLDatabases(new.Namespace)
		return func() error {
			log.Infof("creating new *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLUser:
		c := customClient.SqlV1beta1().SQLUsers(new.Namespace)
		return func() error {
			log.Infof("creating new *sql_cnrm_cloud_google_com_v1beta1.SQLUser for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *istio_security_v1beta1.AuthorizationPolicy:
		c := istioClient.SecurityV1beta1().AuthorizationPolicies(new.Namespace)
		return func() error {
			log.Infof("creating new *istio_security_v1beta1.AuthorizationPolicy for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *nais_v1.Jwker:
		c := customClient.NaisV1().Jwkers(new.Namespace)
		return func() error {
			log.Infof("creating new *nais_v1.Jwker for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *nais_v1.AzureAdApplication:
		c := customClient.NaisV1().AzureAdApplications(new.Namespace)
		return func() error {
			log.Infof("creating new *nais_v1.AzureAdApplication for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *nais_v1.IDPortenClient:
		c := customClient.NaisV1().IDPortenClients(new.Namespace)
		return func() error {
			log.Infof("creating new *nais_v1.IDPortenClient for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	case *nais_v1.MaskinportenClient:
		c := customClient.NaisV1().MaskinportenClients(new.Namespace)
		return func() error {
			log.Infof("creating new *nais_v1.MaskinportenClient for %s", new.Name)
			_, err := c.Create(new)
			if err != nil && errors.IsAlreadyExists(err) {
				return nil
			}
			return err
		}

	default:
		panic(fmt.Errorf("BUG! You didn't specify a case for type '%T' in the file hack/generator/updater.go", new))
	}
}

func FindAll(clientSet kubernetes.Interface, customClient clientV1Alpha1.Interface, istioClient istioClientSet.Interface, app *nais_v1alpha1.Application) ([]runtime.Object, error) {
	resources := make([]runtime.Object, 0)

	{
		c := clientSet.CoreV1().Services(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*corev1.Service", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*corev1.Service", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.CoreV1().Secrets(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*corev1.Secret", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*corev1.Secret", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.CoreV1().ServiceAccounts(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*corev1.ServiceAccount", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*corev1.ServiceAccount", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.AppsV1().Deployments(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*appsv1.Deployment", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*appsv1.Deployment", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.NetworkingV1beta1().Ingresses(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*networkingv1beta1.Ingress", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*networkingv1beta1.Ingress", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.AutoscalingV1().HorizontalPodAutoscalers(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*autoscalingv1.HorizontalPodAutoscaler", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*autoscalingv1.HorizontalPodAutoscaler", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.NetworkingV1().NetworkPolicies(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*networkingv1.NetworkPolicy", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*networkingv1.NetworkPolicy", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.NetworkingV1alpha3().VirtualServices(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*networking_istio_io_v1alpha3.VirtualService", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*networking_istio_io_v1alpha3.VirtualService", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.NetworkingV1alpha3().ServiceEntries(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*networking_istio_io_v1alpha3.ServiceEntry", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*networking_istio_io_v1alpha3.ServiceEntry", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.RbacV1().Roles(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*rbacv1.Role", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*rbacv1.Role", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := clientSet.RbacV1().RoleBindings(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*rbacv1.RoleBinding", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*rbacv1.RoleBinding", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.IamV1beta1().IAMServiceAccounts(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.IamV1beta1().IAMPolicies(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*iam_cnrm_cloud_google_com_v1beta1.IAMPolicy", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*iam_cnrm_cloud_google_com_v1beta1.IAMPolicy", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.IamV1beta1().IAMPolicyMembers(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.StorageV1beta1().StorageBuckets(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*storage_cnrm_cloud_google_com_v1beta1.StorageBucket", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*storage_cnrm_cloud_google_com_v1beta1.StorageBucket", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.StorageV1beta1().StorageBucketAccessControls(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.SqlV1beta1().SQLInstances(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*sql_cnrm_cloud_google_com_v1beta1.SQLInstance", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*sql_cnrm_cloud_google_com_v1beta1.SQLInstance", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.SqlV1beta1().SQLDatabases(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*sql_cnrm_cloud_google_com_v1beta1.SQLDatabase", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*sql_cnrm_cloud_google_com_v1beta1.SQLDatabase", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.SqlV1beta1().SQLUsers(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*sql_cnrm_cloud_google_com_v1beta1.SQLUser", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*sql_cnrm_cloud_google_com_v1beta1.SQLUser", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := istioClient.SecurityV1beta1().AuthorizationPolicies(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*istio_security_v1beta1.AuthorizationPolicy", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*istio_security_v1beta1.AuthorizationPolicy", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.NaisV1().Jwkers(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*nais_v1.Jwker", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*nais_v1.Jwker", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.NaisV1().AzureAdApplications(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*nais_v1.AzureAdApplication", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*nais_v1.AzureAdApplication", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.NaisV1().IDPortenClients(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*nais_v1.IDPortenClient", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*nais_v1.IDPortenClient", err)
			}
			resources = append(resources, items...)
		}
	}

	{
		c := customClient.NaisV1().MaskinportenClients(app.Namespace)
		existing, err := c.List(metav1.ListOptions{LabelSelector: "app=" + app.Name})
		if err != nil && !errors.IsNotFound(err) {
			return nil, fmt.Errorf("discover %s: %s", "*nais_v1.MaskinportenClient", err)
		} else if existing != nil {
			items, err := meta.ExtractList(existing)
			if err != nil {
				return nil, fmt.Errorf("extract list of %s: %s", "*nais_v1.MaskinportenClient", err)
			}
			resources = append(resources, items...)
		}
	}

	return withOwnerReference(app, resources), nil
}

func withOwnerReference(app *nais_v1alpha1.Application, resources []runtime.Object) []runtime.Object {
	owned := make([]runtime.Object, 0, len(resources))

	hasOwnerReference := func(r runtime.Object) (bool, error) {
		m, err := meta.Accessor(r)
		if err != nil {
			return false, err
		}
		for _, ref := range m.GetOwnerReferences() {
			if ref.UID == app.UID {
				return true, nil
			}
		}
		return false, nil
	}

	for _, resource := range resources {
		ok, err := hasOwnerReference(resource)
		if err == nil && ok {
			owned = append(owned, resource)
		}
	}

	return owned
}

func DeleteIfExists(clientSet kubernetes.Interface, customClient clientV1Alpha1.Interface, istioClient istioClientSet.Interface, resource runtime.Object) func() error {
	switch new := resource.(type) {

	case *corev1.Service:
		c := clientSet.CoreV1().Services(new.Namespace)
		return func() error {
			log.Infof("deleting *corev1.Service for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *corev1.Secret:
		c := clientSet.CoreV1().Secrets(new.Namespace)
		return func() error {
			log.Infof("deleting *corev1.Secret for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *corev1.ServiceAccount:
		c := clientSet.CoreV1().ServiceAccounts(new.Namespace)
		return func() error {
			log.Infof("deleting *corev1.ServiceAccount for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *appsv1.Deployment:
		c := clientSet.AppsV1().Deployments(new.Namespace)
		return func() error {
			log.Infof("deleting *appsv1.Deployment for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *networkingv1beta1.Ingress:
		c := clientSet.NetworkingV1beta1().Ingresses(new.Namespace)
		return func() error {
			log.Infof("deleting *networkingv1beta1.Ingress for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *autoscalingv1.HorizontalPodAutoscaler:
		c := clientSet.AutoscalingV1().HorizontalPodAutoscalers(new.Namespace)
		return func() error {
			log.Infof("deleting *autoscalingv1.HorizontalPodAutoscaler for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *networkingv1.NetworkPolicy:
		c := clientSet.NetworkingV1().NetworkPolicies(new.Namespace)
		return func() error {
			log.Infof("deleting *networkingv1.NetworkPolicy for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *networking_istio_io_v1alpha3.VirtualService:
		c := customClient.NetworkingV1alpha3().VirtualServices(new.Namespace)
		return func() error {
			log.Infof("deleting *networking_istio_io_v1alpha3.VirtualService for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *networking_istio_io_v1alpha3.ServiceEntry:
		c := customClient.NetworkingV1alpha3().ServiceEntries(new.Namespace)
		return func() error {
			log.Infof("deleting *networking_istio_io_v1alpha3.ServiceEntry for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *rbacv1.Role:
		c := clientSet.RbacV1().Roles(new.Namespace)
		return func() error {
			log.Infof("deleting *rbacv1.Role for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *rbacv1.RoleBinding:
		c := clientSet.RbacV1().RoleBindings(new.Namespace)
		return func() error {
			log.Infof("deleting *rbacv1.RoleBinding for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount:
		c := customClient.IamV1beta1().IAMServiceAccounts(new.Namespace)
		return func() error {
			log.Infof("deleting *iam_cnrm_cloud_google_com_v1beta1.IAMServiceAccount for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy:
		c := customClient.IamV1beta1().IAMPolicies(new.Namespace)
		return func() error {
			log.Infof("deleting *iam_cnrm_cloud_google_com_v1beta1.IAMPolicy for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember:
		c := customClient.IamV1beta1().IAMPolicyMembers(new.Namespace)
		return func() error {
			log.Infof("deleting *iam_cnrm_cloud_google_com_v1beta1.IAMPolicyMember for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucket:
		c := customClient.StorageV1beta1().StorageBuckets(new.Namespace)
		return func() error {
			log.Infof("deleting *storage_cnrm_cloud_google_com_v1beta1.StorageBucket for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl:
		c := customClient.StorageV1beta1().StorageBucketAccessControls(new.Namespace)
		return func() error {
			log.Infof("deleting *storage_cnrm_cloud_google_com_v1beta1.StorageBucketAccessControl for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLInstance:
		c := customClient.SqlV1beta1().SQLInstances(new.Namespace)
		return func() error {
			log.Infof("deleting *sql_cnrm_cloud_google_com_v1beta1.SQLInstance for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase:
		c := customClient.SqlV1beta1().SQLDatabases(new.Namespace)
		return func() error {
			log.Infof("deleting *sql_cnrm_cloud_google_com_v1beta1.SQLDatabase for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *sql_cnrm_cloud_google_com_v1beta1.SQLUser:
		c := customClient.SqlV1beta1().SQLUsers(new.Namespace)
		return func() error {
			log.Infof("deleting *sql_cnrm_cloud_google_com_v1beta1.SQLUser for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *istio_security_v1beta1.AuthorizationPolicy:
		c := istioClient.SecurityV1beta1().AuthorizationPolicies(new.Namespace)
		return func() error {
			log.Infof("deleting *istio_security_v1beta1.AuthorizationPolicy for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *nais_v1.Jwker:
		c := customClient.NaisV1().Jwkers(new.Namespace)
		return func() error {
			log.Infof("deleting *nais_v1.Jwker for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *nais_v1.AzureAdApplication:
		c := customClient.NaisV1().AzureAdApplications(new.Namespace)
		return func() error {
			log.Infof("deleting *nais_v1.AzureAdApplication for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *nais_v1.IDPortenClient:
		c := customClient.NaisV1().IDPortenClients(new.Namespace)
		return func() error {
			log.Infof("deleting *nais_v1.IDPortenClient for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	case *nais_v1.MaskinportenClient:
		c := customClient.NaisV1().MaskinportenClients(new.Namespace)
		return func() error {
			log.Infof("deleting *nais_v1.MaskinportenClient for %s", new.Name)
			err := c.Delete(new.Name, &metav1.DeleteOptions{})
			if err != nil && errors.IsNotFound(err) {
				return nil
			}

			return err
		}

	default:
		panic(fmt.Errorf("BUG! You didn't specify a case for type '%T' in the file hack/generator/updater.go", new))
	}
}
